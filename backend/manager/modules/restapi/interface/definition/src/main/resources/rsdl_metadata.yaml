


!!org.ovirt.engine.api.restapi.rsdl.MetaData
actions:
- name: /api/vms|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /api/vms/{vm:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      Filter: {value: true|false, required: false}
- name: /api/vms/{vm:id}|rel=delete
  request:
    body:
      required: false
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.force: 'xs:boolean', action.vm.disks.detach_only: 'xs:boolean'}
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}|rel=update
  request:
    body:
      parameterType: VM
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          vm.name: xs:string
          vm.cluster.id|name: xs:string
          vm.timezone: xs:string
          vm.os.boot--COLLECTION: {boot.dev: 'xs:string'}
          vm.custom_properties.custom_property--COLLECTION: {custom_property.name: 'xs:string', custom_property.value: 'xs:string'}
          vm.os.type: xs:string
          vm.usb.enabled: xs:boolean
          vm.usb.type: xs:string
          vm.type: xs:string
          vm.os.initRd: xs:string
          vm.display.monitors: xs:int
          vm.display.type: xs:string
          vm.display.allow_override: xs:boolean
          vm.display.smartcard_enabled: xs:boolean
          vm.os.cmdline: xs:string
          vm.cpu.mode: xs:string
          vm.cpu.topology.cores: xs:int
          vm.memory: xs:long
          vm.high_availability.priority: xs:int
          vm.high_availability.enabled: xs:boolean
          vm.domain.name: xs:string
          vm.description: xs:string
          vm.stateless: xs:boolean
          vm.delete_protected: xs:boolean
          vm.cpu.topology.sockets: xs:int
          vm.placement_policy.affinity: xs:string
          vm.placement_policy.host.id|name: xs:string
          vm.origin: xs:string
          vm.os.kernel: xs:string
          vm.payloads.payload--COLLECTION: {payload.type: 'xs:string', payload.file.name: 'xs:string', payload.file.content: 'xs:string'}
          vm.cpu.cpu_tune.vcpu_pin--COLLECTION: {vcpu_pin.vcpu: 'xs:int', vcpu_pin.cpu_set: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms|rel=add
  request:
    body:
      parameterType: VM
      signatures:
      - mandatoryArguments: {vm.name: 'xs:string', vm.template.id|name: 'xs:string', vm.cluster.id|name: 'xs:string'}
        optionalArguments:
          vm.quota.id: xs:string
          vm.timezone: xs:string
          vm.os.boot--COLLECTION: {boot.dev: 'xs:string'}
          vm.custom_properties.custom_property--COLLECTION: {custom_property.name: 'xs:string', custom_property.value: 'xs:string'}
          vm.os.type: xs:string
          vm.usb.enabled: xs:boolean
          vm.usb.type: xs:string
          vm.type: xs:string
          vm.os.initRd: xs:string
          vm.display.monitors: xs:int
          vm.display.type: xs:string
          vm.display.allow_override: xs:boolean
          vm.display.smartcard_enabled: xs:boolean
          vm.os.cmdline: xs:string
          vm.cpu.topology.cores: xs:int
          vm.memory: xs:long
          vm.high_availability.priority: xs:int
          vm.high_availability.enabled: xs:boolean
          vm.domain.name: xs:string
          vm.description: xs:string
          vm.stateless: xs:boolean
          vm.delete_protected: xs:boolean
          vm.cpu.mode: xs:string
          vm.cpu.topology.sockets: xs:int
          vm.placement_policy.affinity: xs:string
          vm.placement_policy.host.id|name: xs:string
          vm.origin: xs:string
          vm.os.kernel: xs:string
          vm.disks.clone: xs:boolean
          vm.payloads.payload--COLLECTION: {payload.type: 'xs:string', payload.file.name: 'xs:string', payload.file.content: 'xs:string'}
          vm.cpu.cpu_tune.vcpu_pin--COLLECTION: {vcpu_pin.vcpu: 'xs:int', vcpu_pin.cpu_set: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
      Expect: {value: 201-created, required: false}
- name: /api/vms/{vm:id}/shutdown|rel=shutdown
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/stop|rel=stop
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/start|rel=start
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.vm.os.initRd: 'xs:string', action.vm.domain.name: 'xs:string',
          action.vm.placement_policy.host.id|name: 'xs:string', action.vm.placement_policy.affinity: 'xs:string',
          action.async: 'xs:boolean', action.vm.os.kernel: 'xs:string', action.grace_period.expiry: 'xs:long',
          action.vm.display.type: 'xs:string', action.vm.stateless: 'xs:boolean', action.vm.os.cmdline: 'xs:string',
          action.vm.domain.user.username: 'xs:string', action.pause: 'xs:boolean',
          action.vm.os.boot--COLLECTION: {boot.dev: 'xs:string'}, action.vm.domain.user.password: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
      Filter: {value: true|false, required: false}
- name: /api/vms/{vm:id}/suspend|rel=suspend
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/export|rel=export
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.exclusive: 'xs:boolean',
          action.discard_snapshots: 'xs:boolean', action.storage_domain.id|name: 'xs:string',
          action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/detach|rel=detach
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/migrate|rel=migrate
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.host.id|name: 'xs:string', action.async: 'xs:boolean',
          action.force: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/move|rel=move #deprecated, replaced by '/api/vms/{vm:id}/disks/{disk:id}/move|rel=move'
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.storage_domain.id|name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/ticket|rel=ticket
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/cdroms|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/vms/{vm:id}/cdroms/{cdrom:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/cdroms/{cdrom:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/cdroms/{cdrom:id}|rel=update
  request:
    body:
      parameterType: CdRom
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {cdrom.file.id: 'xs:string'}
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      current: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/cdroms|rel=add
  request:
    body:
      parameterType: CdRom
      signatures:
      - mandatoryArguments: {cdrom.file.id: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/disks|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/vms/{vm:id}/disks/{disk:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/disks/{disk:id}|rel=delete
  request:
    body:
      required: false
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.detach: 'xs:boolean'}
        optionalArguments: {}
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/disks/{disk:id}|rel=update
  request:
    body:
      parameterType: Disk
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          size: xs:int #deprecated, replaced by 'provisioned_size'
          provisioned_size: xs:int
          disk.interface: xs:string
          disk.format: xs:string
          disk.sparse: xs:boolean
          disk.bootable: xs:boolean
          disk.shareable: xs:boolean
          disk.propagate_errors: xs:boolean
          disk.wipe_after_delete: xs:boolean
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/disks|rel=add
  request:
    body:
      parameterType: Disk
      signatures:
      - mandatoryArguments: {provisioned_size: 'xs:int', disk.interface: 'xs:string', disk.format: 'xs:string'}
        optionalArguments:
          disk.alias: xs:string
          disk.name: xs:string
          disk.size: xs:int #deprecated, replaced by 'provisioned_size'
          disk.sparse: xs:boolean
          disk.bootable: xs:boolean
          disk.shareable: xs:boolean
          disk.propagate_errors: xs:boolean
          disk.wipe_after_delete: xs:boolean
          disk.storage_domains.storage_domain--COLLECTION: {storage_domain.id|name: 'xs:string'}
        #the signature below is for direct-LUN disk, which doesn't require size, but requires the lun id, the lun type, and the lun connection-details.
      - mandatoryArguments: {disk.interface: 'xs:string', disk.format: 'xs:string', disk.lun_storage.type: 'xs:string',
          disk.lun_storage.logical_unit--COLLECTION: {logical_unit.id: 'xs:string', logical_unit.address: 'xs:string', logical_unit.port: 'xs:int', logical_unit.target: 'xs:string'}}
        optionalArguments:
          disk.alias: xs:string
          disk.sparse: xs:boolean
          disk.bootable: xs:boolean
          disk.shareable: xs:boolean
          disk.propagate_errors: xs:boolean
          disk.wipe_after_delete: xs:boolean
          disk.storage_domains.storage_domain--COLLECTION: {storage_domain.id|name: 'xs:string'}
      - mandatoryArguments: {disk.id: 'xs:string'}
        optionalArguments: {disk.active: 'xs:boolean'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/disks/{disk:id}/activate|rel=activate
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/disks/{disk:id}/deactivate|rel=deactivate
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/disks/{disk:id}/move|rel=move
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {storagedomain.id|name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
      Filter: {value: true|false, required: false}
- name: /api/vms/{vm:id}/nics|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/vms/{vm:id}/nics/{nic:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/nics/{nic:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/nics/{nic:id}|rel=update
  request:
    body:
      parameterType: NIC
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {nic.network.id|name: 'xs:string', nic.linked: 'xs:boolean', nic.name: 'xs:string', nic.mac.address: 'xs:string', nic.interface: 'xs:string', nic.port_mirroring.networks.network--COLLECTION: {network.id: 'xs:string'}, nic.plugged: 'xs:boolean'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/nics/{nic:id}/activate|rel=activate #deprecated, replaced by 'add/edit'
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/nics/{nic:id}/deactivate|rel=deactivate #deprecated, replaced by 'add/edit'
  request:
    body:
      parameterType: Action
      signatures: []
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
    urlparams: {}
- name: /api/vms/{vm:id}/nics|rel=add
  request:
    body:
      parameterType: NIC
      signatures:
      - mandatoryArguments: {nic.name: 'xs:string'}
        optionalArguments: {nic.network.id|name: 'xs:string', nic.linked: 'xs:boolean', nic.mac.address: 'xs:string', nic.interface: 'xs:string', nic.port_mirroring.networks.network--COLLECTION: {network.id: 'xs:string'}, nic.plugged: 'xs:boolean'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/permissions|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/vms/{vm:id}/permissions/{permission:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/permissions/{permission:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/permissions|rel=add
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/statistics|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/vms/{vm:id}/statistics/{statistic:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/snapshots|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/vms/{vm:id}/snapshots/{snapshot:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/snapshots/{snapshot:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/snapshots|rel=add
  request:
    body:
      parameterType: Snapshot
      signatures:
      - mandatoryArguments: {snapshot.description: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/snapshots/{snapshot:id}/restore|rel=restore
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/snapshots/{snapshot:id}/cdroms|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/snapshots/{snapshot:id}/cdroms/{cdrom:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/snapshots/{snapshot:id}/disks|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/snapshots/{snapshot:id}/disks/{disk:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/snapshots/{snapshot:id}/nics|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/snapshots/{snapshot:id}/nics/{nic:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/tags|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/vms/{vm:id}/tags/{tag:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vms/{vm:id}/tags/{tag:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vms/{vm:id}/tags|rel=add
  request:
    body:
      parameterType: Tag
      signatures:
      - mandatoryArguments: {tag.id|name: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/disks|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/disks/{disk:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/disks/{disk:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/disks|rel=add
  request:
    body:
      parameterType: Disk
      signatures:
      - mandatoryArguments: {provisioned_size: 'xs:int', disk.interface: 'xs:string', disk.format: 'xs:string'}
        optionalArguments:
          disk.alias: xs:string
          disk.name: xs:string
          disk.size: xs:int #deprecated, replaced by 'provisioned_size'
          disk.sparse: xs:boolean
          disk.bootable: xs:boolean
          disk.shareable: xs:boolean
          disk.propagate_errors: xs:boolean
          disk.wipe_after_delete: xs:boolean
          disk.storage_domains.storage_domain--COLLECTION: {storage_domain.id|name: 'xs:string'}
        #the signature below is for direct-LUN disk, which doesn't require size, but requires the lun id, the lun type, and the lun connection-details.
      - mandatoryArguments: {disk.interface: 'xs:string', disk.format: 'xs:string', disk.lun_storage.type: 'xs:string',
          disk.lun_storage.logical_unit--COLLECTION: {logical_unit.id: 'xs:string', logical_unit.address: 'xs:string', logical_unit.port: 'xs:int', logical_unit.target: 'xs:string'}}
        optionalArguments:
          disk.alias: xs:string
          disk.sparse: xs:boolean
          disk.bootable: xs:boolean
          disk.shareable: xs:boolean
          disk.propagate_errors: xs:boolean
          disk.wipe_after_delete: xs:boolean
          disk.storage_domains.storage_domain--COLLECTION: {storage_domain.id|name: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/disks/{disk:id}/statistics|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/disks/{disk:id}/statistics/{statistic:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/capabilities|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/capabilities/{version:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/storagedomains|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /api/storagedomains/{storagedomain:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      Filter: {value: true|false, required: false}
- name: /api/storagedomains/{storagedomain:id}|rel=delete
  request:
    body:
      parameterType: StorageDomain
      signatures:
      - mandatoryArguments: {storagedomain.host.id|name: 'xs:string'}
        optionalArguments: {}
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/storagedomains/{storagedomain:id}|rel=update
  request:
    body:
      parameterType: StorageDomain
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {storagedomain.name: 'xs:string'}
      - mandatoryArguments: {storagedomain.storage.logical_unit--COLLECTION: {logical_unit.address: 'xs:string',
            logical_unit.port: 'xs:int', logical_unit.target: 'xs:string', logical_unit.username: 'xs:string', logical_unit.password: 'xs:string',
            logical_unit.serial: 'xs:string', logical_unit.vendor_id: 'xs:string', logical_unit.product_id: 'xs:string',
            logical_unit.lun_mapping: 'xs:int', logical_unit.portal: 'xs:string', logical_unit.paths: 'xs:int', logical_unit.id: 'xs:string'}}
        optionalArguments: {storagedomain.name: 'xs:string', storagedomain.storage.override_luns: 'xs:boolean'}
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/storagedomains|rel=add
  request:
    body:
      parameterType: StorageDomain
      signatures:
      - mandatoryArguments: {storagedomain.host.id|name: 'xs:string',
          storagedomain.type: 'xs:string', storagedomain.storage.type: 'xs:string',
          storagedomain.format: 'xs:boolean', storagedomain.storage.address: 'xs:string',
          storagedomain.storage.logical_unit--COLLECTION: {logical_unit.address: 'xs:string',
            logical_unit.port: 'xs:int', logical_unit.target: 'xs:string', logical_unit.username: 'xs:string', logical_unit.password: 'xs:string',
            logical_unit.serial: 'xs:string', logical_unit.vendor_id: 'xs:string', logical_unit.product_id: 'xs:string',
            logical_unit.lun_mapping: 'xs:int', logical_unit.portal: 'xs:string', logical_unit.paths: 'xs:int', logical_unit.id: 'xs:string'}}
        optionalArguments: {storagedomain.name: 'xs:string', storagedomain.storage.override_luns: 'xs:boolean'}
      - mandatoryArguments: {storagedomain.host.id|name: 'xs:string',
          storagedomain.type: 'xs:string', storagedomain.storage.type: 'xs:string',
          storagedomain.format: 'xs:boolean',storagedomain.storage.address: 'xs:string', 
          storagedomain.storage.path: 'xs:string'}
        optionalArguments: {storagedomain.name: 'xs:string'}
      - mandatoryArguments: {storagedomain.host.id|name: 'xs:string',
          storagedomain.type: 'xs:string', storagedomain.storage.type: 'xs:string',
          storagedomain.format: 'xs:boolean', storagedomain.storage.path: 'xs:string'}
        optionalArguments: {storagedomain.name: 'xs:string'}
      - mandatoryArguments: {storagedomain.host.id|name: 'xs:string',
          storagedomain.type: 'xs:string', storagedomain.storage.type: 'xs:string',
          storagedomain.format: 'xs:boolean', storagedomain.storage.path: 'xs:string', storagedomain.storage.vfs_type: 'xs:string'}
        optionalArguments: {storagedomain.name: 'xs:string', storagedomain.storage.address: 'xs:string', storagedomain.storage.mount_options: 'xs:string'}
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/storagedomains/{storagedomain:id}/files|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/storagedomains/{storagedomain:id}/files/{file:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/storagedomains/{storagedomain:id}/permissions|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/storagedomains/{storagedomain:id}/permissions/{permission:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/storagedomains/{storagedomain:id}/permissions/{permission:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/storagedomains/{storagedomain:id}/permissions|rel=add
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/storagedomains/{storagedomain:id}/templates/{template:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/storagedomains/{storagedomain:id}/templates|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/storagedomains/{storagedomain:id}/templates/{template:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/storagedomains/{storagedomain:id}/templates/{template:id}/import|rel=import
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.cluster.id|name: 'xs:string'}
        optionalArguments: {action.storage_domain.id|name: 'xs:string', action.clone: 'xs:boolen', action.exclusive: 'xs:boolen', action.template.name: 'xs:string', action.vm.disks.disk--COLLECTION: {disk.id: 'xs:string'}}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/storagedomains/{storagedomain:id}/vms|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/storagedomains/{storagedomain:id}/vms/{vm:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/storagedomains/{storagedomain:id}/vms/{vm:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/storagedomains/{storagedomain:id}/vms/{vm:id}/import|rel=import
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.cluster.id|name: 'xs:string'}
        optionalArguments: {action.storage_domain.id|name: 'xs:string', action.vm.snapshots.collapse_snapshots: 'xs:boolean', action.clone: 'xs:boolen', action.exclusive: 'xs:boolen', action.vm.name: 'xs:string', action.vm.disks.disk--COLLECTION: {disk.id: 'xs:string'}}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/clusters|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /api/clusters/{cluster:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      Filter: {value: true|false, required: false}
- name: /api/clusters/{cluster:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/clusters/{cluster:id}|rel=update
  request:
    body:
      parameterType: Cluster
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {cluster.name: 'xs:string', cluster.description: 'xs:string', cluster.cpu.id: 'xs:string', cluster.version.major: 'xs:int', cluster.version.minor: 'xs:int',
        cluster.memory_policy.overcommit.percent: 'xs:double', cluster.memory_policy.transparent_hugepages.enabled: 'xs:boolean', cluster.scheduling_policy.policy: 'xs:string',
        cluster.scheduling_policy.thresholds.low: 'xs:int', cluster.scheduling_policy.thresholds.high: 'xs:int', cluster.scheduling_policy.thresholds.duration: 'xs:int',
        cluster.error_handling.on_error: 'xs:string', cluster.virt_service: 'xs:boolean', cluster.gluster_service: 'xs:boolean', cluster.threads_as_cores: 'xs:boolean'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/clusters|rel=add
  request:
    body:
      parameterType: Cluster
      signatures:
      - mandatoryArguments: {cluster.data_center.id|name: 'xs:string', cluster.name: 'xs:string', cluster.version.major: 'xs:int', cluster.version.minor: 'xs:int', cluster.cpu.id: 'xs:string'}
        optionalArguments: {cluster.description: 'xs:string', cluster.memory_policy.overcommit.percent: 'xs:double', cluster.memory_policy.transparent_hugepages.enabled: 'xs:boolean',
        cluster.scheduling_policy.policy: 'xs:string', cluster.scheduling_policy.thresholds.low: 'xs:int', cluster.scheduling_policy.thresholds.high: 'xs:int',
        cluster.scheduling_policy.thresholds.duration: 'xs:int', cluster.error_handling.on_error: 'xs:string', cluster.virt_service: 'xs:boolean', cluster.gluster_service: 'xs:boolean', cluster.threads_as_cores: 'xs:boolean'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/clusters/{cluster:id}/networks|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/clusters/{cluster:id}/networks/{network:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/clusters/{cluster:id}/networks/{network:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/clusters/{cluster:id}/networks/{network:id}|rel=update
  request:
    body:
      parameterType: Network
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {network.display: 'xs:boolean', network.usages.usage--COLLECTION: {usage: 'xs:string'}}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/clusters/{cluster:id}/networks|rel=add
  request:
    body:
      parameterType: Network
      signatures:
      - mandatoryArguments: {network.id|name: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/clusters/{cluster:id}/permissions|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/clusters/{cluster:id}/permissions/{permission:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/clusters/{cluster:id}/permissions/{permission:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/clusters/{cluster:id}/permissions|rel=add
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/datacenters/{datacenter:id}|rel=update
  request:
    body:
      parameterType: DataCenter
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          datacenter.name: xs:string
          datacenter.storage_type: xs:string
          datacenter.version.major: xs:int
          datacenter.version.minor: xs:int
          datacenter.description: xs:string
          datacenter.storage_format: xs:string
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/datacenters|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /api/datacenters/{datacenter:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      Filter: {value: true|false, required: false}
- name: /api/datacenters/{datacenter:id}|rel=delete
  request:
    body:
      required: false
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.force: 'xs:boolean'}
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/datacenters|rel=add
  request:
    body:
      parameterType: DataCenter
      signatures:
      - mandatoryArguments: {datacenter.name: 'xs:string', datacenter.storage_type: 'xs:string', datacenter.version.major: 'xs:int', datacenter.version.minor: 'xs:int'}
        optionalArguments:
          datacenter.description: xs:string
          datacenter.storage_format: xs:string
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/datacenters/{datacenter:id}/permissions|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/datacenters/{datacenter:id}/permissions/{permission:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/datacenters/{datacenter:id}/permissions/{permission:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/datacenters/{datacenter:id}/permissions|rel=add
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/datacenters/{datacenter:id}/storagedomains|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/datacenters/{datacenter:id}/storagedomains/{storagedomain:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/datacenters/{datacenter:id}/storagedomains/{storagedomain:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/datacenters/{datacenter:id}/storagedomains|rel=add
  request:
    body:
      parameterType: StorageDomain
      signatures:
      - mandatoryArguments: {storagedomain.id|name: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/datacenters/{datacenter:id}/storagedomains/{storagedomain:id}/activate|rel=activate
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/datacenters/{datacenter:id}/storagedomains/{storagedomain:id}/deactivate|rel=deactivate
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/domains|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/domains/{domain:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/domains/{domain:id}/groups|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/domains/{domain:id}/groups/{group:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/domains/{domain:id}/users|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/domains/{domain:id}/users/{user:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/events|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      from: {context: matrix, type: 'xs:string', value: event_id, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/events/{event:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/groups|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/events/{event:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/events|rel=add
  request:
    body:
      parameterType: Event
      signatures:
      - mandatoryArguments: {event.description: 'xs:string', event.severity: 'xs:string', event.origin: 'xs:string', event.custom_id: 'xs:int'}
        optionalArguments:  {event.flood_rate: 'xs:int', event.host.id: 'xs:string',event.user.id: 'xs:string',
                           event.vm.id: 'xs:string',event.storage_domain.id: 'xs:string',event.template.id: 'xs:string',
                           event.cluster.id: 'xs:string',event.data_center.id: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/groups/{group:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/groups/{group:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/groups|rel=add
  request:
    body:
      parameterType: Group
      signatures:
      - mandatoryArguments: {group.name: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/groups/{group:id}/permissions|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/groups/{group:id}/permissions/{permission:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/groups/{group:id}/permissions/{permission:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/groups/{group:id}/permissions|rel=add
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.data_center.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.cluster.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.host.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.storage_domain.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.vm.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.vmpool.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.template.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/groups/{group:id}/roles|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/groups/{group:id}/roles/{role:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/groups/{group:id}/roles/{role:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/groups/{group:id}/roles|rel=add
  request:
    body:
      parameterType: Role
      signatures:
      - mandatoryArguments: {role.id: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/groups/{group:id}/roles/{role:id}/permits|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/groups/{group:id}/roles/{role:id}/permits/{permit:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/groups/{group:id}/roles/{role:id}/permits/{permit:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/groups/{group:id}/roles/{role:id}/permits|rel=add
  request:
    body:
      parameterType: Permit
      signatures:
      - mandatoryArguments: {permit.id|name: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/groups/{group:id}/tags|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/groups/{group:id}/tags/{tag:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/groups/{group:id}/tags/{tag:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/groups/{group:id}/tags|rel=add
  request:
    body:
      parameterType: Tag
      signatures:
      - mandatoryArguments: {tag.id|name: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /api/hosts/{host:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      Filter: {value: true|false, required: false}
- name: /api/hosts/{host:id}|rel=delete
  request:
    body:
      required: false
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.force: 'xs:boolean'}
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts/{host:id}|rel=update
  request:
    body:
      parameterType: Host
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {host.name: 'xs:string', host.address: 'xs:string', host.root_password: 'xs:string', host.cluster.id|name: 'xs:string',
          host.port: 'xs:int', host.storage_manager.priority: 'xs:int', host.power_management.type: 'xs:string',
          host.power_management.enabled: 'xs:boolean', host.power_management.address: 'xs:string', host.power_management.user_name: 'xs:string',
          host.power_management.password: 'xs:string', host.power_management.options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string'},  host.power_management.pm_proxy--COLLECTION: {propietary : 'xs:string'}, host.power_management.agents.agent--COLLECTION:{type: 'xs:string', address: 'xs:string', user_name: 'xs:string', password: 'xs:string', options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string'}}}
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts|rel=add
  request:
    body:
      parameterType: Host
      signatures:
      - mandatoryArguments: {host.name: 'xs:string', host.address: 'xs:string', host.root_password: 'xs:string', host.cluster.id|name: 'xs:string'}
        optionalArguments: {host.port: 'xs:int', host.display.address : 'xs:string', host.storage_manager.priority: 'xs:int', host.power_management.type: 'xs:string',
          host.power_management.enabled: 'xs:boolean', host.power_management.address: 'xs:string', host.power_management.user_name: 'xs:string',
          host.power_management.password: 'xs:string', host.power_management.options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string'}, host.power_management.pm_proxy--COLLECTION: {propietary : 'xs:string'}, host.power_management.agents.agent--COLLECTION:{type: 'xs:string', address: 'xs:string', user_name: 'xs:string', password: 'xs:string', options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string'}}, host.reboot_after_installation: 'xs:boolean'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts/{host:id}/activate|rel=activate
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts/{host:id}/approve|rel=approve
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.cluster.id|name: 'xs:string', action.async: 'xs:boolean',
          action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts/{host:id}/commitnetconfig|rel=commitnetconfig
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts/{host:id}/deactivate|rel=deactivate
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts/{host:id}/fence|rel=fence
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts/{host:id}/install|rel=install
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.root_password: 'xs:string'} 
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts/{host:id}/iscsidiscover|rel=iscsidiscover
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.iscsi.address: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts/{host:id}/iscsilogin|rel=iscsilogin
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.iscsi.address: 'xs:string', action.iscsi.target: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts/{host:id}/nics|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/hosts/{host:id}/nics/{nic:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/hosts/{host:id}/nics/{nic:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts/{host:id}/nics/{nic:id}|rel=update
  request:
    body:
      parameterType: HostNIC
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          hostnic.bonding.slaves.host_nic--COLLECTION: {host_nic.id|name: 'xs:string'}
          hostnic.network.id|name: xs:string
          hostnic.name: xs:string
          hostnic.bonding.options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string',
            type: 'xs:string'}
          hostnic.ip.gateway: xs:string
          hostnic.boot_protocol: xs:string
          hostnic.mac: xs:string
          hostnic.ip.address: xs:string
          hostnic.ip.netmask: xs:string
          hostnic.ip.mtu: xs:int
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts/{host:id}/nics|rel=add
  request:
    body:
      parameterType: HostNIC
      signatures:
      - mandatoryArguments: {hostnic.network.id|name: 'xs:string', hostnic.name: 'xs:string', hostnic.bonding.slaves.host_nic--COLLECTION: {host_nic.id|name: 'xs:string'}}
        optionalArguments:
          hostnic.bonding.options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string',
            type: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts/{host:id}/nics/setupnetworks|rel=setupnetworks
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          action.host_nics.host_nic--COLLECTION: {host_nic.network.id|name: 'xs:string', host_nic.name: 'xs:string', host_nic.ip.gateway: 'xs:string',
            host_nic.boot_protocol: 'xs:string', host_nic.mac: 'xs:string', host_nic.ip.address: 'xs:string', host_nic.ip.netmask: 'xs:string',
            host_nic.bonding.options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string', option.type: 'xs:string'},
            bonding.slaves.host_nic--COLLECTION: {host_nic.name|id: 'xs:string'},
            host_nic.override_configuration: 'xs:boolean'}
          action.checkConnectivity: xs:boolean
          action.connectivityTimeout: xs:int
          action.force: xs:boolean
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts/{host:id}/nics/{nic:id}/attach|rel=attach
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.network.id|name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts/{host:id}/nics/{nic:id}/detach|rel=detach
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts/{host:id}/nics/{nic:id}/statistics|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/hosts/{host:id}/nics/{nic:id}/statistics/{statistic:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/hosts/{host:id}/permissions|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/hosts/{host:id}/permissions/{permission:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/hosts/{host:id}/permissions/{permission:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts/{host:id}/permissions|rel=add
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts/{host:id}/statistics|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/hosts/{host:id}/statistics/{statistic:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/hosts/{host:id}/storage|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/hosts/{host:id}/storage/{storag:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/hosts/{host:id}/tags|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/hosts/{host:id}/tags/{tag:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/hosts/{host:id}/tags/{tag:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/hosts/{host:id}/tags|rel=add
  request:
    body:
      parameterType: Tag
      signatures:
      - mandatoryArguments: {tag.id|name: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/networks|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/networks/{network:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/networks/{network:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/networks/{network:id}|rel=update
  request:
    body:
      parameterType: Network
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {network.name: 'xs:string', network.description: 'xs:string', network.vlan.id: 'xs:string',
          network.ip.address: 'xs:string', network.ip.gateway: 'xs:string', network.ip.netmask: 'xs:string',
          network.display: 'xs:boolean', network.stp: 'xs:boolean', network.mtu: 'xs:int'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/networks|rel=add
  request:
    body:
      parameterType: Network
      signatures:
      - mandatoryArguments: {network.data_center.id|name: 'xs:string', network.name: 'xs:string'}
        optionalArguments: {network.description: 'xs:string', network.vlan.id: 'xs:string',
          network.ip.address: 'xs:string', network.ip.gateway: 'xs:string', network.ip.netmask: 'xs:string',
          network.display: 'xs:boolean', network.stp: 'xs:boolean', network.mtu: 'xs:int'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/networks/{network:id}/permissions|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/networks/{network:id}/permissions/{permission:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/networks/{network:id}/permissions/{permission:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/networks/{network:id}/permissions|rel=add
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.group.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/roles|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/roles/{role:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/roles/{role:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/roles|rel=add
  request:
    body:
      parameterType: Role
      signatures:
      - mandatoryArguments: {role.name: 'xs:string', role.permits.permit--COLLECTION: {permit.id: 'xs:string'}}
        optionalArguments: {role.description: 'xs:string', role.administrative: 'xs:boolean'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/roles/{role:id}|rel=update
  request:
    body:
      parameterType: Role
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {role.permits.permit--COLLECTION: {permit.id: 'xs:string'}, role.description: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/roles/{role:id}/permits|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/roles/{role:id}/permits/{permit:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/roles/{role:id}/permits/{permit:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/roles/{role:id}/permits|rel=add
  request:
    body:
      parameterType: Permit
      signatures:
      - mandatoryArguments: {permit.id|name: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/tags|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/tags/{tag:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/tags/{tag:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/tags/{tag:id}|rel=update
  request:
    body:
      parameterType: Tag
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {tag.name: 'xs:string', tag.description: 'xs:string', tag.parent.name: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/tags|rel=add
  request:
    body:
      parameterType: Tag
      signatures:
      - mandatoryArguments: {tag.name: 'xs:string'}
        optionalArguments: {tag.description: 'xs:string', tag.parent.name: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/templates|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /api/templates/{template:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      Filter: {value: true|false, required: false}
- name: /api/templates/{template:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/templates/{template:id}|rel=update
  request:
    body:
      parameterType: Template
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          template.name: 'xs:string'
          template.memory: xs:long
          template.cpu.topology.cores: xs:int
          template.high_availability.enabled: 'xs:boolean'
          template.os.cmdline: xs:string
          template.origin: xs:string
          template.high_availability.priority: 'xs:int'
          template.timezone: xs:string
          template.domain.name: xs:string
          template.type: xs:string
          template.stateless: 'xs:boolean'
          template.delete_protected: xs:boolean
          template.placement_policy.affinity: xs:string
          template.description: xs:string
          template.custom_properties.custom_property--COLLECTION: {custom_property.name: 'xs:string', custom_property.value: 'xs:string'}
          template.os.type: xs:string
          template.os.boot--COLLECTION: {boot.dev: 'xs:string'}
          template.cpu.topology.sockets: xs:int
          template.os.kernel: xs:string
          template.display.type: xs:string
          template.display.monitors: xs:int
          template.display.allow_override: xs:boolean
          template.display.smartcard_enabled: xs:boolean
          template.os.initRd: xs:string
          template.usb.enabled: xs:boolean
          template.usb.type: xs:string
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/templates|rel=add
  request:
    body:
      parameterType: Template
      signatures:
      - mandatoryArguments: {template.vm.id|name: 'xs:string', template.name: 'xs:string'}
        optionalArguments:
          template.memory: xs:long
          template.cpu.topology.cores: xs:int
          template.high_availability.enabled: 'xs:boolean'
          template.os.cmdline: xs:string
          template.origin: xs:string
          template.high_availability.priority: 'xs:int'
          template.timezone: xs:string
          template.domain.name: xs:string
          template.type: xs:string
          template.stateless: 'xs:boolean'
          template.delete_protected: xs:boolean
          template.placement_policy.affinity: xs:string
          template.description: xs:string
          template.custom_properties.custom_property--COLLECTION: {custom_property.name: 'xs:string', custom_property.value: 'xs:string'}
          template.os.type: xs:string
          template.os.boot--COLLECTION: {boot.dev: 'xs:string'}
          template.cpu.topology.sockets: xs:int
          template.os.kernel: xs:string
          template.display.type: xs:string
          template.display.monitors: xs:int
          template.display.allow_override: xs:boolean
          template.display.smartcard_enabled: xs:boolean
          template.os.initRd: xs:string
          template.usb.enabled: xs:boolean
          template.usb.type: xs:string
          template.vm.disks.disk--COLLECTION: {disk.id: 'xs:string', storage_domains.storage_domain--COLLECTION: {storage_domain.id: 'xs:string'}}
          template.cpu.cpu_tune.vcpu_pin--COLLECTION: {vcpu_pin.vcpu: 'xs:int', vcpu_pin.cpu_set: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/templates/{template:id}/export|rel=export
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.storage_domain.id|name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.exclusive: 'xs:boolean',
          action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/templates/{template:id}/cdroms|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/templates/{template:id}/cdroms/{cdrom:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/templates/{template:id}/disks|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/templates/{template:id}/disks/{disk:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/templates/{template:id}/disks/{disk:id}|rel=delete
  request:
    body:
      required: false
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.storage_domain.id: 'xs:string', action.force: 'xs:boolean'}
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/templates/{template:id}/disks/{disk:id}/copy|rel=copy
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {storagedomain.id|name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
      Filter: {value: true|false, required: false}
- name: /api/templates/{template:id}/nics|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/templates/{template:id}/nics|rel=add
  request:
    body:
      parameterType: NIC
      signatures:
      - mandatoryArguments: {nic.network.id|name: 'xs:string', nic.name: 'xs:string'}
        optionalArguments: {nic.linked: 'xs:boolean', nic.mac.address: 'xs:string', nic.interface: 'xs:string', nic.port_mirroring.networks.network--COLLECTION: {network.id: 'xs:string'}}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/templates/{template:id}/nics/{nic:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/templates/{template:id}/nics/{nic:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/templates/{template:id}/nics/{nic:id}|rel=update
  request:
    body:
      parameterType: NIC
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {nic.network.id|name: 'xs:string', nic.linked: 'xs:boolean', nic.name: 'xs:string', nic.mac.address: 'xs:string', nic.interface: 'xs:string', nic.port_mirroring.networks.network--COLLECTION: {network.id: 'xs:string'}}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/templates/{template:id}/permissions|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/templates/{template:id}/permissions/{permission:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/templates/{template:id}/permissions/{permission:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/templates/{template:id}/permissions|rel=add
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/users|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/users/{user:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/users|rel=add
  request:
    body:
      parameterType: User
      signatures:
      - mandatoryArguments: {user.user_name: 'xs:string', user.domain.id|name: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/users/{user:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/users/{user:id}/permissions|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/users/{user:id}/permissions/{permission:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/users/{user:id}/permissions/{permission:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/users/{user:id}/permissions|rel=add
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.data_center.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.cluster.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.host.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.storage_domain.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.vm.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.vmpool.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.template.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/users/{user:id}/roles|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/users/{user:id}/roles/{role:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/users/{user:id}/roles/{role:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/users/{user:id}/roles|rel=add
  request:
    body:
      parameterType: Role
      signatures:
      - mandatoryArguments: {role.id: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/users/{user:id}/roles/{role:id}/permits|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/users/{user:id}/roles/{role:id}/permits/{permit:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/users/{user:id}/roles/{role:id}/permits/{permit:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/users/{user:id}/roles/{role:id}/permits|rel=add
  request:
    body:
      parameterType: Permit
      signatures:
      - mandatoryArguments: {permit.id|name: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/users/{user:id}/tags|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/users/{user:id}/tags/{tag:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/users/{user:id}/tags/{tag:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/users/{user:id}/tags|rel=add
  request:
    body:
      parameterType: Tag
      signatures:
      - mandatoryArguments: {tag.id|name: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vmpools|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: 
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /api/vmpools/{vmpool:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      Filter: {value: true|false, required: false}
- name: /api/vmpools/{vmpool:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vmpools/{vmpool:id}|rel=update
  request:
    body:
      parameterType: VmPool
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {vmpool.cluster.id|name: 'xs:string', vmpool.template.id|name: 'xs:string',
          vmpool.name: 'xs:string', vmpool.size: 'xs:int'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vmpools/{vmpool:id}/allocatevm|rel=allocatevm
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vmpools|rel=add
  request:
    body:
      parameterType: VmPool
      signatures:
      - mandatoryArguments: {vmpool.cluster.id|name: 'xs:string', vmpool.template.id|name: 'xs:string',
          vmpool.name: 'xs:string'}
        optionalArguments: {vmpool.size: 'xs:int'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vmpools/{vmpool:id}/permissions|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /api/vmpools/{vmpool:id}/permissions/{permission:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /api/vmpools/{vmpool:id}/permissions/{permission:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /api/vmpools/{vmpool:id}/permissions|rel=add
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/clusters/{cluster:id}/glustervolumes|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /api/clusters/{cluster:id}/glustervolumes|rel=add
  request:
    body:
      parameterType: GlusterVolume
      signatures:
      - mandatoryArguments:
          gluster_volume.name: 'xs:string'
          gluster_volume.volume_type: 'xs:string'
          gluster_volume.bricks.brick--COLLECTION: {brick.server_id: 'xs:string', brick.brick_dir: 'xs:string'}
        optionalArguments:
          gluster_volume.transport_types--COLLECTION: {transport_type: 'xs:string'}
          gluster_volume.replica_count: 'xs:unsignedShort'
          gluster_volume.stripe_count: 'xs:unsignedShort'
          gluster_volume.options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/clusters/{cluster:id}/glustervolumes/{glustervolume:id}/start|rel=start
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.force: 'xs:boolean'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/clusters/{cluster:id}/glustervolumes/{glustervolume:id}/stop|rel=stop
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.force: 'xs:boolean'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/clusters/{cluster:id}/glustervolumes/{glustervolume:id}/rebalance|rel=rebalance
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.fix_layout: 'xs:boolean', action.force: 'xs:boolean'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/clusters/{cluster:id}/glustervolumes/{glustervolume:id}/setoption|rel=setoption
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.option.name: 'xs:string', action.option.value: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/clusters/{cluster:id}/glustervolumes/{glustervolume:id}/resetoption|rel=resetoption
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.option.name: 'xs:string', action.force: 'xs:boolean'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/clusters/{cluster:id}/glustervolumes/{glustervolume:id}/resetalloptions|rel=resetalloptions
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/clusters/{cluster:id}/glustervolumes/{glustervolume:id}/bricks|rel=add
  request:
    body:
      parameterType: Bricks
      signatures:
      - mandatoryArguments:
          bricks.brick--COLLECTION: {brick.server_id: 'xs:string', brick.brick_dir: 'xs:string'}
        optionalArguments:
          bricks.brick--COLLECTION: {brick.replica_count: 'xs:unsignedShort', brick.stripe_count: 'xs:unsignedShort'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/clusters/{cluster:id}/glustervolumes/{glustervolume:id}/bricks|rel=delete
  request:
    body:
      parameterType: Bricks
      signatures:
      - mandatoryArguments:
          bricks--COLLECTION: {brick.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /api/clusters/{cluster:id}/glustervolumes/{glustervolume:id}/bricks/{brick:id}/replace|rel=replace
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.brick.server_id: 'xs:string', action.brick.brick_dir: 'xs:string'}
        optionalArguments: {action.force: 'xs:boolean'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}

